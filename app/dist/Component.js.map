{"version":3,"file":"Component.js","names":["models","_interopRequireDefault","__models","Component","UIComponent","extend","metadata","manifest","interfaces","init","_init","UIComponent.prototype.init.call","this","setModel","createDeviceModel","createAppModel","getRouter","initialize","SSR_CONTROLS","getRenderer","sap","ui","core","ElementMetadata","prototype","renderer","call","includes","getName","controlClass","getClass","render","onAfterRendering","rm","control","preservedContent","document","querySelector","getId","unsafeHtml","outerHTML","console","error","remove","getContentDensityClass","_getContentDensityClass","contentDensityClass","undefined","body","classList","contains","Device","support","touch"],"sources":["Component.ts"],"sourcesContent":["import Device from 'sap/ui/Device';\nimport Control from 'sap/ui/core/Control';\nimport RenderManager from 'sap/ui/core/RenderManager';\nimport UIComponent from 'sap/ui/core/UIComponent';\nimport models from './model/models';\n\n/**\n * @namespace com.github.dfenerski.ui5_ssr\n */\nexport default class Component extends UIComponent {\n    public static metadata = {\n        manifest: 'json',\n        interfaces: ['sap.ui.core.IAsyncContentCreation'],\n    };\n\n    private contentDensityClass: string;\n\n    public init(): void {\n        // call the base component's init function\n        super.init();\n\n        // create the device model\n        this.setModel(models.createDeviceModel(), 'device');\n\n        // create the app model\n        this.setModel(models.createAppModel(), 'app');\n\n        // create the views based on the url/hash\n        this.getRouter().initialize();\n\n        const SSR_CONTROLS = ['sap.m.Page'];\n        // @ts-expect-error behold\n        const getRenderer = sap.ui.core.ElementMetadata.prototype.getRenderer;\n        // @ts-expect-error behold\n        sap.ui.core.ElementMetadata.prototype.getRenderer = function () {\n            const renderer = getRenderer.call(this);\n            //\n            if (SSR_CONTROLS.includes(this.getName())) {\n                const controlClass = this.getClass();\n                const render = renderer.render;\n                const onAfterRendering =\n                    controlClass.prototype.onAfterRendering;\n                renderer.render = function (\n                    rm: RenderManager,\n                    control: Control,\n                ) {\n                    // const preservedContent = <any>(\n                    //     RenderManager.findPreservedContent(control.getId())\n                    // );\n                    const preservedContent = document.querySelector(\n                        `#sap-ui-ssr #${control.getId()}`,\n                    );\n                    if (preservedContent) {\n                        // preservedContent.remove();\n                        rm.unsafeHtml(preservedContent.outerHTML);\n                        console.error('Preserved content rendered');\n                        return;\n                    }\n                    render.call(renderer, rm, control);\n                };\n                controlClass.prototype.onAfterRendering = function () {\n                    const preservedContent = document.querySelector(\n                        `#sap-ui-ssr #${this.getId()}`,\n                    );\n                    if (preservedContent) {\n                        preservedContent.remove();\n                    }\n                    onAfterRendering.call(this);\n                };\n            }\n            return renderer;\n        };\n    }\n\n    /**\n     * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\n     * design mode class should be set, which influences the size appearance of some controls.\n     * @public\n     * @returns css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\n     */\n    public getContentDensityClass(): string {\n        if (this.contentDensityClass === undefined) {\n            // check whether FLP has already set the content density class; do nothing in this case\n            if (\n                document.body.classList.contains('sapUiSizeCozy') ||\n                document.body.classList.contains('sapUiSizeCompact')\n            ) {\n                this.contentDensityClass = '';\n            } else if (!Device.support.touch) {\n                // apply \"compact\" mode if touch is not supported\n                this.contentDensityClass = 'sapUiSizeCompact';\n            } else {\n                // \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\n                this.contentDensityClass = 'sapUiSizeCozy';\n            }\n        }\n        return this.contentDensityClass;\n    }\n}\n"],"mappings":"4MAIOA,EAAMC,EAAAC,GAEb,MAGqBC,EAAkBC,EAAWC,OAAA,0CAChCC,SAAW,CACrBC,SAAU,OACVC,WAAY,CAAC,sCAKVC,KAAI,SAAAC,IAEPC,sBAAAC,MAGAA,KAAKC,SAASb,EAAOc,oBAAqB,UAG1CF,KAAKC,SAASb,EAAOe,iBAAkB,OAGvCH,KAAKI,YAAYC,aAEjB,MAAMC,EAAe,CAAC,cAEtB,MAAMC,EAAcC,IAAIC,GAAGC,KAAKC,gBAAgBC,UAAUL,YAE1DC,IAAIC,GAAGC,KAAKC,gBAAgBC,UAAUL,YAAc,WAChD,MAAMM,EAAWN,EAAYO,KAAKd,MAElC,GAAIM,EAAaS,SAASf,KAAKgB,WAAY,CACvC,MAAMC,EAAejB,KAAKkB,WAC1B,MAAMC,EAASN,EAASM,OACxB,MAAMC,EACFH,EAAaL,UAAUQ,iBAC3BP,EAASM,OAAS,SACdE,EACAC,GAKA,MAAMC,EAAmBC,SAASC,cAC7B,gBAAeH,EAAQI,WAE5B,GAAIH,EAAkB,CAElBF,EAAGM,WAAWJ,EAAiBK,WAC/BC,QAAQC,MAAM,8BACd,MACJ,CACAX,EAAOL,KAAKD,EAAUQ,EAAIC,EAC9B,EACAL,EAAaL,UAAUQ,iBAAmB,WACtC,MAAMG,EAAmBC,SAASC,cAC7B,gBAAezB,KAAK0B,WAEzB,GAAIH,EAAkB,CAClBA,EAAiBQ,QACrB,CACAX,EAAiBN,KAAKd,KAC1B,CACJ,CACA,OAAOa,CACX,CACJ,EAQOmB,uBAAsB,SAAAC,IACzB,GAAIjC,KAAKkC,sBAAwBC,UAAW,CAExC,GACIX,SAASY,KAAKC,UAAUC,SAAS,kBACjCd,SAASY,KAAKC,UAAUC,SAAS,oBACnC,CACEtC,KAAKkC,oBAAsB,EAC/B,MAAO,IAAKK,EAAOC,QAAQC,MAAO,CAE9BzC,KAAKkC,oBAAsB,kBAC/B,KAAO,CAEHlC,KAAKkC,oBAAsB,eAC/B,CACJ,CACA,OAAOlC,KAAKkC,mBAChB,IAAC,OAxFgB3C,CAAS","ignoreList":[]}