{"version":3,"file":"Component-preload.js","sections":[{"offset":{"line":1,"column":0},"map":{"version":3,"names":[],"sources":["Component-preload.js?bundle-code-0"],"mappings":"AAAA;AACA","sourcesContent":["sap.ui.require.preload({\n"],"sourceRoot":""}},{"offset":{"line":3,"column":0},"map":{"version":3,"file":"Component.js","names":["models","_interopRequireDefault","__models","Component","UIComponent","extend","metadata","manifest","interfaces","init","_init","UIComponent.prototype.init.call","this","setModel","createDeviceModel","createAppModel","getRouter","initialize","SSR_CONTROLS","getRenderer","sap","ui","core","ElementMetadata","prototype","renderer","call","includes","getName","controlClass","getClass","render","onAfterRendering","rm","control","preservedContent","document","querySelector","getId","unsafeHtml","outerHTML","console","error","remove","getContentDensityClass","_getContentDensityClass","contentDensityClass","undefined","body","classList","contains","Device","support","touch"],"sources":["Component.ts"],"sourcesContent":["import Device from 'sap/ui/Device';\r\nimport Control from 'sap/ui/core/Control';\r\nimport RenderManager from 'sap/ui/core/RenderManager';\r\nimport UIComponent from 'sap/ui/core/UIComponent';\r\nimport models from './model/models';\r\n\r\n/**\r\n * @namespace com.github.dfenerski.ui5_ssr\r\n */\r\nexport default class Component extends UIComponent {\r\n    public static metadata = {\r\n        manifest: 'json',\r\n        interfaces: ['sap.ui.core.IAsyncContentCreation'],\r\n    };\r\n\r\n    private contentDensityClass: string;\r\n\r\n    public init(): void {\r\n        // call the base component's init function\r\n        super.init();\r\n\r\n        // create the device model\r\n        this.setModel(models.createDeviceModel(), 'device');\r\n\r\n        // create the app model\r\n        this.setModel(models.createAppModel(), 'app');\r\n\r\n        // create the views based on the url/hash\r\n        this.getRouter().initialize();\r\n\r\n        const SSR_CONTROLS = ['sap.m.Page'];\r\n        // @ts-expect-error behold\r\n        const getRenderer = sap.ui.core.ElementMetadata.prototype.getRenderer;\r\n        // @ts-expect-error behold\r\n        sap.ui.core.ElementMetadata.prototype.getRenderer = function () {\r\n            const renderer = getRenderer.call(this);\r\n            //\r\n            if (SSR_CONTROLS.includes(this.getName())) {\r\n                const controlClass = this.getClass();\r\n                const render = renderer.render;\r\n                const onAfterRendering =\r\n                    controlClass.prototype.onAfterRendering;\r\n                renderer.render = function (\r\n                    rm: RenderManager,\r\n                    control: Control,\r\n                ) {\r\n                    // const preservedContent$ = <any>(\r\n                    //     RenderManager.findPreservedContent(control.getId())\r\n                    // );\r\n                    const preservedContent = document.querySelector(\r\n                        `#sap-ui-ssr #${control.getId()}`,\r\n                    );\r\n                    if (preservedContent) {\r\n                        // preservedContent.remove();\r\n                        rm.unsafeHtml(preservedContent.outerHTML);\r\n                        console.error('Preserved content rendered');\r\n                        return;\r\n                    }\r\n                    render.call(renderer, rm, control);\r\n                };\r\n                controlClass.prototype.onAfterRendering = function () {\r\n                    const preservedContent = document.querySelector(\r\n                        `#sap-ui-ssr #${this.getId()}`,\r\n                    );\r\n                    if (preservedContent) {\r\n                        preservedContent.remove();\r\n                    }\r\n                    onAfterRendering.call(this);\r\n                };\r\n            }\r\n            return renderer;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy\r\n     * design mode class should be set, which influences the size appearance of some controls.\r\n     * @public\r\n     * @returns css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set\r\n     */\r\n    public getContentDensityClass(): string {\r\n        if (this.contentDensityClass === undefined) {\r\n            // check whether FLP has already set the content density class; do nothing in this case\r\n            if (\r\n                document.body.classList.contains('sapUiSizeCozy') ||\r\n                document.body.classList.contains('sapUiSizeCompact')\r\n            ) {\r\n                this.contentDensityClass = '';\r\n            } else if (!Device.support.touch) {\r\n                // apply \"compact\" mode if touch is not supported\r\n                this.contentDensityClass = 'sapUiSizeCompact';\r\n            } else {\r\n                // \"cozy\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table\r\n                this.contentDensityClass = 'sapUiSizeCozy';\r\n            }\r\n        }\r\n        return this.contentDensityClass;\r\n    }\r\n}\r\n"],"mappings":"AAAA,4MAIOA,EAAMC,EAAAC,GAEb,MAGqBC,EAAkBC,EAAWC,OAAA,0CAChCC,SAAW,CACrBC,SAAU,OACVC,WAAY,CAAC,sCAKVC,KAAI,SAAAC,IAEPC,sBAAAC,MAGAA,KAAKC,SAASb,EAAOc,oBAAqB,UAG1CF,KAAKC,SAASb,EAAOe,iBAAkB,OAGvCH,KAAKI,YAAYC,aAEjB,MAAMC,EAAe,CAAC,cAEtB,MAAMC,EAAcC,IAAIC,GAAGC,KAAKC,gBAAgBC,UAAUL,YAE1DC,IAAIC,GAAGC,KAAKC,gBAAgBC,UAAUL,YAAc,WAChD,MAAMM,EAAWN,EAAYO,KAAKd,MAElC,GAAIM,EAAaS,SAASf,KAAKgB,WAAY,CACvC,MAAMC,EAAejB,KAAKkB,WAC1B,MAAMC,EAASN,EAASM,OACxB,MAAMC,EACFH,EAAaL,UAAUQ,iBAC3BP,EAASM,OAAS,SACdE,EACAC,GAKA,MAAMC,EAAmBC,SAASC,cAC7B,gBAAeH,EAAQI,WAE5B,GAAIH,EAAkB,CAElBF,EAAGM,WAAWJ,EAAiBK,WAC/BC,QAAQC,MAAM,8BACd,MACJ,CACAX,EAAOL,KAAKD,EAAUQ,EAAIC,EAC9B,EACAL,EAAaL,UAAUQ,iBAAmB,WACtC,MAAMG,EAAmBC,SAASC,cAC7B,gBAAezB,KAAK0B,WAEzB,GAAIH,EAAkB,CAClBA,EAAiBQ,QACrB,CACAX,EAAiBN,KAAKd,KAC1B,CACJ,CACA,OAAOa,CACX,CACJ,EAQOmB,uBAAsB,SAAAC,IACzB,GAAIjC,KAAKkC,sBAAwBC,UAAW,CAExC,GACIX,SAASY,KAAKC,UAAUC,SAAS,kBACjCd,SAASY,KAAKC,UAAUC,SAAS,oBACnC,CACEtC,KAAKkC,oBAAsB,EAC/B,MAAO,IAAKK,EAAOC,QAAQC,MAAO,CAE9BzC,KAAKkC,oBAAsB,kBAC/B,KAAO,CAEHlC,KAAKkC,oBAAsB,eAC/B,CACJ,CACA,OAAOlC,KAAKkC,mBAChB,IAAC,OAxFgB3C,CAAS","ignoreList":[],"sourceRoot":""}},{"offset":{"line":6,"column":0},"map":{"version":3,"file":"App.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","App","extend","onInit","_onInit","this","getView","addStyleClass","getOwnerComponent","getContentDensityClass"],"sources":["App.controller.ts"],"sourcesContent":["import BaseController from \"./BaseController\";\r\n\r\n/**\r\n * @namespace com.github.dfenerski.ui5_ssr.controller\r\n */\r\nexport default class App extends BaseController {\r\n\tpublic onInit(): void {\r\n\t\t// apply content density mode to root view\r\n\t\tthis.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());\r\n\t}\r\n}\r\n"],"mappings":"AAAA,gKAAOA,EAAcC,EAAAC,GAErB,MAGqBC,EAAYH,EAAcI,OAAA,+CACvCC,OAAM,SAAAC,IAEZC,KAAKC,UAAUC,cAAcF,KAAKG,oBAAoBC,yBACvD,IAAC,OAJmBR,CAAG","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":9,"column":0},"map":{"version":3,"file":"BaseController.js","names":["BaseController","Controller","extend","getOwnerComponent","_getOwnerComponent","Controller.prototype.getOwnerComponent.call","this","getRouter","_getRouter","UIComponent","getRouterFor","getResourceBundle","_getResourceBundle","oModel","getModel","_getModel","sName","getView","setModel","_setModel","navTo","_navTo","oParameters","bReplace","undefined","onNavBack","_onNavBack","sPreviousHash","History","getInstance","getPreviousHash","window","history","go"],"sources":["BaseController.ts"],"sourcesContent":["import Controller from \"sap/ui/core/mvc/Controller\";\r\nimport UIComponent from \"sap/ui/core/UIComponent\";\r\nimport AppComponent from \"../Component\";\r\nimport Model from \"sap/ui/model/Model\";\r\nimport ResourceModel from \"sap/ui/model/resource/ResourceModel\";\r\nimport ResourceBundle from \"sap/base/i18n/ResourceBundle\";\r\nimport Router from \"sap/ui/core/routing/Router\";\r\nimport History from \"sap/ui/core/routing/History\";\r\n\r\n/**\r\n * @namespace com.github.dfenerski.ui5_ssr.controller\r\n */\r\nexport default abstract class BaseController extends Controller {\r\n\t/**\r\n\t * Convenience method for accessing the component of the controller's view.\r\n\t * @returns The component of the controller's view\r\n\t */\r\n\tpublic getOwnerComponent(): AppComponent {\r\n\t\treturn super.getOwnerComponent() as AppComponent;\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method to get the components' router instance.\r\n\t * @returns The router instance\r\n\t */\r\n\tpublic getRouter(): Router {\r\n\t\treturn UIComponent.getRouterFor(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for getting the i18n resource bundle of the component.\r\n\t * @returns The i18n resource bundle of the component\r\n\t */\r\n\tpublic getResourceBundle(): ResourceBundle | Promise<ResourceBundle> {\r\n\t\tconst oModel = this.getOwnerComponent().getModel(\"i18n\") as ResourceModel;\r\n\t\treturn oModel.getResourceBundle();\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for getting the view model by name in every controller of the application.\r\n\t * @param [sName] The model name\r\n\t * @returns The model instance\r\n\t */\r\n\tpublic getModel(sName?: string): Model {\r\n\t\treturn this.getView().getModel(sName);\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for setting the view model in every controller of the application.\r\n\t * @param oModel The model instance\r\n\t * @param [sName] The model name\r\n\t * @returns The current base controller instance\r\n\t */\r\n\tpublic setModel(oModel: Model, sName?: string): BaseController {\r\n\t\tthis.getView().setModel(oModel, sName);\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for triggering the navigation to a specific target.\r\n\t * @public\r\n\t * @param sName Target name\r\n\t * @param [oParameters] Navigation parameters\r\n\t * @param [bReplace] Defines if the hash should be replaced (no browser history entry) or set (browser history entry)\r\n\t */\r\n\tpublic navTo(sName: string, oParameters?: object, bReplace?: boolean): void {\r\n\t\tthis.getRouter().navTo(sName, oParameters, undefined, bReplace);\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience event handler for navigating back.\r\n\t * It there is a history entry we go one step back in the browser history\r\n\t * If not, it will replace the current entry of the browser history with the main route.\r\n\t */\r\n\tpublic onNavBack(): void {\r\n\t\tconst sPreviousHash = History.getInstance().getPreviousHash();\r\n\t\tif (sPreviousHash !== undefined) {\r\n\t\t\twindow.history.go(-1);\r\n\t\t} else {\r\n\t\t\tthis.getRouter().navTo(\"main\", {}, undefined, true);\r\n\t\t}\r\n\t}\r\n}\r\n"],"mappings":"AAAA,+IASA,MAG8BA,EAAuBC,EAAUC,OAAA,0DAKvDC,kBAAiB,SAAAC,IACvB,OAAAC,mCAAAC,KACD,EAMOC,UAAS,SAAAC,IACf,OAAOC,EAAYC,aAAaJ,KACjC,EAMOK,kBAAiB,SAAAC,IACvB,MAAMC,EAASP,KAAKH,oBAAoBW,SAAS,QACjD,OAAOD,EAAOF,mBACf,EAOOG,SAAQ,SAAAC,EAACC,GACf,OAAOV,KAAKW,UAAUH,SAASE,EAChC,EAQOE,SAAQ,SAAAC,EAACN,EAAeG,GAC9BV,KAAKW,UAAUC,SAASL,EAAQG,GAChC,OAAOV,IACR,EASOc,MAAK,SAAAC,EAACL,EAAeM,EAAsBC,GACjDjB,KAAKC,YAAYa,MAAMJ,EAAOM,EAAaE,UAAWD,EACvD,EAOOE,UAAS,SAAAC,IACf,MAAMC,EAAgBC,EAAQC,cAAcC,kBAC5C,GAAIH,IAAkBH,UAAW,CAChCO,OAAOC,QAAQC,IAAI,EACpB,KAAO,CACN3B,KAAKC,YAAYa,MAAM,OAAQ,CAAC,EAAGI,UAAW,KAC/C,CACD,IAAC,OArE4BxB,CAAc","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":12,"column":0},"map":{"version":3,"file":"Main.controller.js","names":["BaseController","_interopRequireDefault","__BaseController","Main","extend","handleDemoButtonPress","_handleDemoButtonPress","MessageToast","show","handleActionButtonPress","_handleActionButtonPress","page","this","getView","byId","html","getContent"],"sources":["Main.controller.ts"],"sourcesContent":["import MessageToast from 'sap/m/MessageToast';\r\nimport Page from 'sap/m/Page';\r\nimport BaseController from './BaseController';\r\n\r\n/**\r\n * @namespace com.github.dfenerski.ui5_ssr.controller\r\n */\r\nexport default class Main extends BaseController {\r\n    public handleDemoButtonPress(): void {\r\n        MessageToast.show('Demo button pressed');\r\n    }\r\n\r\n    public handleActionButtonPress(): void {\r\n        const page = <Page>this.getView().byId('mainPage');\r\n        const html = page.getContent()[1];\r\n        //\r\n        // RenderManager.preserveContent(\r\n        //     document.getElementById('__component0---main--demoButton'),\r\n        //     true,\r\n        //     false,\r\n        // );\r\n        MessageToast.show('Action button pressed');\r\n    }\r\n}\r\n"],"mappings":"AAAA,uLAEOA,EAAcC,EAAAC,GAErB,MAGqBC,EAAaH,EAAcI,OAAA,gDACrCC,sBAAqB,SAAAC,IACxBC,EAAaC,KAAK,sBACtB,EAEOC,wBAAuB,SAAAC,IAC1B,MAAMC,EAAaC,KAAKC,UAAUC,KAAK,YACvC,MAAMC,EAAOJ,EAAKK,aAAa,GAO/BT,EAAaC,KAAK,wBACtB,IAAC,OAfgBL,CAAI","ignoreList":[],"sourceRoot":"controller"}},{"offset":{"line":19,"column":0},"map":{"version":3,"file":"formatter.js","names":["formatValue","value","toUpperCase","__exports"],"sources":["formatter.ts"],"sourcesContent":["export default {\r\n\tformatValue: (value: string) => {\r\n\t\treturn value?.toUpperCase();\r\n\t}\r\n};\r\n"],"mappings":"AAAA,4DAAe,CACdA,YAAcC,GACNA,GAAOC,eAEf,OAAAC,CAAA","ignoreList":[],"sourceRoot":"model"}},{"offset":{"line":22,"column":0},"map":{"version":3,"file":"models.js","names":["createDeviceModel","oModel","JSONModel","Device","setDefaultBindingMode","BindingMode","OneWay","createAppModel","html","TwoWay","__exports"],"sources":["models.ts"],"sourcesContent":["import BindingMode from 'sap/ui/model/BindingMode';\r\nimport JSONModel from 'sap/ui/model/json/JSONModel';\r\n\r\nimport Device from 'sap/ui/Device';\r\n\r\nexport default {\r\n    createDeviceModel: () => {\r\n        const oModel = new JSONModel(Device);\r\n        oModel.setDefaultBindingMode(BindingMode.OneWay);\r\n        return oModel;\r\n    },\r\n\r\n    createAppModel: () => {\r\n        const oModel = new JSONModel({\r\n            html: `<button id=\"__component0---main--demoButton\" data-sap-ui=\"__component0---main--demoButton\" data-sap-ui-render=\"\" data-ui5-accesskey=\"d\" class=\"sapMBtnBase sapMBtn\">\r\n\t<span id=\"__component0---main--demoButton-inner\" class=\"sapMBtnInner sapMBtnHoverable sapMFocusable sapMBtnText sapMBtnDefault\">\r\n\t\t<span id=\"__component0---main--demoButton-content\" class=\"sapMBtnContent\">\r\n\t\t\t<bdi id=\"__component0---main--demoButton-BDI-content\" aria-live=\"off\">Demo Btn</bdi>\r\n\t\t</span>\r\n\t</span>\r\n</button>`,\r\n        });\r\n        oModel.setDefaultBindingMode(BindingMode.TwoWay);\r\n        return oModel;\r\n    },\r\n};\r\n"],"mappings":"AAAA,yIAKe,CACXA,kBAAmBA,KACf,MAAMC,EAAS,IAAIC,EAAUC,GAC7BF,EAAOG,sBAAsBC,EAAYC,QACzC,OAAOL,CAAM,EAGjBM,eAAgBA,KACZ,MAAMN,EAAS,IAAIC,EAAU,CACzBM,KAAO,4fAQXP,EAAOG,sBAAsBC,EAAYI,QACzC,OAAOR,CAAM,GAEpB,OAAAS,CAAA","ignoreList":[],"sourceRoot":"model"}},{"offset":{"line":25,"column":0},"map":{"version":3,"file":"Button.js","names":["Button","MButton","extend","renderer","apiVersion","render","rm","button","preservedContent$","RenderManager","findPreservedContent","getId","preservedContent","remove","unsafeHtml","outerHTML","console","error","ButtonRenderer","metadata","constructor","_constructor","id","settings","MButton.prototype.constructor.call","this"],"sources":["Button.ts"],"sourcesContent":["import MButton from 'sap/m/Button';\r\n// @ts-expect-error Renderers are untyped\r\nimport ButtonRenderer from 'sap/m/ButtonRenderer';\r\nimport RenderManager from 'sap/ui/core/RenderManager';\r\n\r\n/**\r\n * @namespace com.github.dfenerski.ui5_ssr.modules.ssr\r\n */\r\nexport default class Button extends MButton {\r\n    public static readonly metadata = {};\r\n\r\n    public static readonly renderer = {\r\n        apiVersion: 4,\r\n        render: (rm: RenderManager, button: Button) => {\r\n            const preservedContent$ = <any>(\r\n                RenderManager.findPreservedContent(button.getId())\r\n            );\r\n            const preservedContent: HTMLElement = preservedContent$[0];\r\n            if (preservedContent) {\r\n                preservedContent.remove();\r\n                rm.unsafeHtml(preservedContent.outerHTML);\r\n                console.error('Preserved content rendered');\r\n                return;\r\n            }\r\n            ButtonRenderer.render(rm, button);\r\n        },\r\n    };\r\n\r\n    // The following three lines were generated and should remain as-is to make TypeScript aware of the constructor signatures\r\n    constructor(idOrSettings?: string | $ButtonSettings);\r\n    constructor(id?: string, settings?: $ButtonSettings);\r\n    constructor(id?: string, settings?: $ButtonSettings) {\r\n        super(id, settings);\r\n    }\r\n}\r\n"],"mappings":"AAAA,4HAKA,MAGqBA,EAAeC,EAAOC,OAAA,mDAGhBC,SAAW,CAC9BC,WAAY,EACZC,OAAQA,CAACC,EAAmBC,KACxB,MAAMC,EACFC,EAAcC,qBAAqBH,EAAOI,SAE9C,MAAMC,EAAgCJ,EAAkB,GACxD,GAAII,EAAkB,CAClBA,EAAiBC,SACjBP,EAAGQ,WAAWF,EAAiBG,WAC/BC,QAAQC,MAAM,8BACd,MACJ,CACAC,EAAeb,OAAOC,EAAIC,EAAO,GAflBY,SAAW,CAAC,EAsBnCC,YAAW,SAAAC,EAACC,EAAaC,GACrBC,6BAAAC,KAAMH,EAAIC,EACd,IAAC,OAzBgBvB,CAAM","ignoreList":[],"sourceRoot":"modules/ssr"}}]}